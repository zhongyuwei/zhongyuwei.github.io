# 20190531 模拟考试

标签（空格分隔）： 总结

---

### T1 Exchange

菜地里有$n$棵菜排成一排，第$i$棵菜的大小为$a_i$。最开始的时候你手上拿着你的出发点的菜。当你经过一棵大小大于你手上的菜的菜的时候，你就会把手上的菜扔掉，拿起更大的菜。有$q$次询问，每一次询问给出$l,r$，你需要回答从$[l,r]$中的某一个点出发开始往右走走到$r$停止，把手中的菜扔掉拿起地上的菜的次数的最大值。$n,q\le 1.5\times 10^6,1\le a_i\le n$

Solution：

我的做法比较奇葩。考虑从$n$开始往左扫的过程中的单调栈，对于$[l,r]$中的一点$x$，它的贡献就是扫到$x$的时候单调栈中小于等于$r$的元素个数。因此，可以用线段树对于每一个$r$维护小于等于$r$的元素个数，$[l,r]$的答案就是扫到$l$的时候，$r$这个点的历史最大值。这样需要支持区间修改，单点查询。这个是可以用一个两个懒标记维护的：一个维护修改量$x$，一个维护在上一次下放标记过后，标记在这个节点上叠加的过程中修改量的最大值$y$。下放的时候$x'=x'+x,y'=max(y',x'+y)$。时间复杂度$O((n+q)\log n)$，自己造数据感觉跑不过，不知道怎么A的。

题解的做法是，考虑单调栈树，**一个子树内的点的编号是连续的一段区间**。于是考虑依次枚举$r$，对于每一个点维护这个点向上会经过多少个小于等于$r$的点（也就是以这个点作为起点的答案），于是就是一个区间加、单点查，时间复杂度也是$O((n+q)\log n)$的，但是每个点只会贡献一次修改（而我那个维护历史最大值的做法每个点会贡献两次修改）。

zlx的奇葩做法：考虑对于每个点维护向下走的最深的点。发现加入一个点的时候会影响到的，是当前仍然在单调栈中的点从栈顶开始的一段连续的区间。二分找到这段区间，这样的复杂度就变成$\log ^2 n$了。一个点退栈之后就不会再修改了，所以可以把它加入另一棵线段树。询问的时候，在栈中二分找到第一个在$r$左边的位置，然后查询区间最大值。感觉修改的过程可以优化到一个$\log $，就是考虑维护下面的最深点的深度，这个直接打一个区间max标记就可以；询问的时候，越靠右的点越优秀，所以只需要查栈中$r$左边的第一个元素的值就可以了。

---

### T2 Tree

交互题。有一棵包含$n$个节点的树，你需要通过$t$次以内的询问问出这棵树的形态（也就是说你需要给出树的所有边）。每一次询问你可以给出两个点$u,v$和一个点集$S$，交互库会返回$S$中有多少个点在$u,v$之间的路径上。$n\le 1000,t\le 1.2\times 10 ^4 $

Solution：

首先对每个点询问一次，把$S$这个点弄成全集，询问它到$1$的路径，这样就可以得到每个点的深度。

考虑对每个点找父亲。它的父亲是深度比它小$1$的点中的一个，直接在深度比它小$1$的点中二分就可以了。

时间复杂度$O(n\log n + n)$。

---

### T3 Hanoi

给汉诺塔游戏定义一套新的规则：

- 有三个塔和$n$个圆盘，$n$个圆盘的大小分别为$1,2,\cdots n$。每一个塔上的圆盘不一定按照大小顺序排列。
- 每一次操作可以指定一个塔的编号$i$（只能是$1$或者$2$）和一个数量$x$，然后把$i$号塔顶部的$x$个圆盘放到第$i+1$号塔的上方。移动的圆盘的相对位置关系不变。
- 终止局面定义为，所有的圆盘都在$3$号塔上，并且自底向上圆盘的大小依次递减。

同时，我们还限制，从$1$号塔到$2$号塔单次移动的圆盘数量不能超过$a$，从$2$号塔到$3$号塔单次移动的圆盘数量不能超过$b$。

给出一个初始局面（只有$1$号塔上有圆盘），问是否存在一组合法的解——如果存在你还需要输出方案。$n\le 1200$

Solution：

题解非常妙。

先不考虑$a,b$。显然有一些性质：

- 当$1$号塔或者$2$号塔的顶部的一段连续序列是以当前还没有到达$3$号塔的最大的圆盘结尾的（也就是说$1$号塔或者二号塔的顶部是$m-k,m-k+1,\cdots m-1,m$，其中$m$是当前还没有到达$3$号塔的最大的圆盘），那么我们的策略一定是直接把这一段放入$3$号塔。
- 在$2$号塔中，如果存在两个元素$x,y$满足$x$在$y$的上方（直接相邻）并且$x+1<y$，那么这个局面一定无解。故而，在任意时刻$2$号塔中的局面一定形如$l_1,l_1+1,l_1+2\cdots r_1,l_2,l_2+1,l_2+2\cdots r_2,\cdots $，其中连续段的划分是极长的，并且满足$r_i<l_{i-1} $。

对于$1$号塔中的圆盘按照自顶向下的顺序构成的序列，我们定义一个几乎下降序列为形如$l_1,l_1+1,l_1+2\cdots r_1,l_2,l_2+1,\cdots r_2,l_3,l_3+1\cdots $且满足$r_i < l_{i-1} $的序列，比如$4,5,6,1,2$。

一个性质是对于$1$号塔中的极长几乎下降前缀，这个前缀与剩下的部分一定不会一起离开$1$号塔。

假设前缀最后一个位置是$x$，那么下一个位置的元素一定大于$x+1$，否则前缀可以更长；如果下一个元素和前面的元素一起离开$1$号塔就违反了前面的第二个性质。

因此可以把$1$号塔中的序列拆成若干个极长几乎下降前缀分别处理。

在不考虑$a,b$的情况下，最优的策略是让$2$号塔中连续段的数量尽量少，也就是让连续段尽量长，因为这样更加不容易出现违反性质二的情况，也更容易与新放入二号塔的段合并成更长的连续段。

我们定义满足$r_i = l_{i-1} - 1$的几乎下降序列为连续几乎下降序列。

如果当前处理的几乎下降序列是连续几乎下降序列，那么（不考虑$a,b$）最优的策略一定是依次把每一个连续的区间放入$2$号塔，在二号塔中形成一个长的连续区间。

如果不是连续几乎下降序列，那么唯一的移动方式就是把整个序列放入$2$号塔，因为其他任何移动方式都会违反性质二。

再考虑有$a,b$限制，限制唯一的影响就是对于连续几乎下降序列，我们没有办法让他们在二号塔形成完整的一段连续区间然后再把连续的区间移到$3$号塔。

设连续几乎下降序列是由$x$个连续的区间组成的。

- 如果$x=1$，那么就把圆盘一个一个放到$2$号塔就可以了。这里为什么不再需要让$2$号塔中的连续区间数量尽量少呢？因为观察可以发现，这些圆盘不可能和$2$号塔顶部的圆盘组成新的连续段，也不可能产生违反性质二的情况。
- 如果$x>2$，那么唯一可行的方法就是把整个几乎下降序列放入$2$号塔，否则就违反了性质二。
- 否则$x=2$。此时我们可以选择在第一个或者第二个连续区间中的某个位置把整个序列断开，然后两部分分别放入二号塔。这里也只需要构造一组合法解就可以了，原因跟$x=1$的情况是一样的。