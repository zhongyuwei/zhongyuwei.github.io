# 20190522 模拟考试

标签（空格分隔）： 总结

---


### T1

有两个长度分别为$n,m$的字符串$s,t$，包含$P,V,?$三种字符。你可以把$?$替换成$P$和$V$中的任意一个字符，从而得到$s',t'$。$P$的价值是$-1$，$V$的价值是$1$。

有两个指针$i_s,i_t$，初始的时候分别指向$s',t'$的开头以前。有一个初始值为$0$的变量$a$。每一次操作的时候：1）如果当前$i_s,i_t$中有一个指向了字符串的结尾，就把另一个向后移一步；2）否则，如果此时$a>0$，就随机选择两个指针中一个向后移一位。3）否则，如果此时存在一个指针，指针后面的一个字符是$V$，我们就从下一个字符是$V$的指针中随机选择一个向后移动一位；4）否则，随机选择一个指针向后移动一位。每一次指针移动的时候，我们都把$a$加上这个指针的越过的字符的价值。问有多少种把$?$替换成$P,V$的方案，使得任意情况下、任意时刻，$a$永远大于等于$0$。$n.m\le 5000$。对于50%的数据，$n,m\le 200$。

Solution：

我到现在都还只会$n^3$的部分分呢。

根据3），如果此时$a=0$且存在一个指针下一个位置是$V$，那么我们一定会移动这个指针，故而$a<0$的时候两个指针的下一个位置一定是$P$或者结尾。又考虑到我们的规则使得我们可以在某个指针的下一个位置是$P$或者结尾的时候让这个指针在那里一直不动，所以如果两个序列中满足下一个位置是结尾或者是$P$的那些位置的前缀和的最小值的和小于了$0$，那么序列就不合法。要注意如果两个指针不是都指向了结尾，$a$可以取到的最小值是这个前缀和$-1$（因为下一步一定会让$a$的取值减一）。这样就可以$dp$解决了。

------

### T3

有一个$M+1$层的分层图，每一层有$n$个点，同层的点之间互相没有边。层之间的边是相同的。共有$M\cdot e$条边，给出$e$组$(u,v,w)$，表示第$i$层的$u$点到第$i+1$层的$v$点之间有一条边权为$w$的边，保证边权不太大。问对于$K\in [2,M]$，前$K$层的点组成的图的最小生成树。对于任意的$K\in [2,M]$，保证前$K$层的点组成的图是连通的。$n,M\le 10^5,e\le 2\times 10^5,1\le w\le 30$

Solution：

可以猜想到一条边只在前几层的图中有贡献。

考虑枚举边权，计算用小于等于这个边权的边得到的生成树的边数。小于等于$w$的边数减去小于等于$w-1$的边数就可以得到边权为$w$的边数，就可以统计出贡献从而得到最小生成树的权值和。

依次处理每一个“二分图”。之前的图对这个图的贡献相当于连通了图左侧的一些点。用一个并查集维护图中点的连通情况，另外用一个数组存下左侧点连通的情况（也就是在左侧点之间“新加入”的边）。处理新的一层的时候首先直接继承上一层的连通信息，因为上一层连通的这一层一定连通。如果“新加入”的边连接的点已经通过其他的边连通，那么这一层中的边数就比上一层要少一；如果边连接了两个连通块，两个连通块包含不同的右侧的点，那么就要对下一层“加边”。考虑只有两个连通块合并的时候才会有新加入的边，而总共至多合并$2n-1$次，因而总复杂度是$O(n\cdot w \cdot \alpha(n)$的。实现的时候有一个技巧是并查集中尽量让右侧的点做祖先，这样就容易判断合并的两个集合是否有两个不同的右侧节点。

