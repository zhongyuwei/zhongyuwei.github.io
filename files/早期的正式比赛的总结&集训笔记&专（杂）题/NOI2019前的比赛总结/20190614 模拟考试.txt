# 20190614 模拟考试

标签（空格分隔）： 总结

---

### T1 Game

有$n$堆硬币，每堆硬币有三枚，最上边的那枚硬币和最下面的那枚硬币的权值是一样的，也就是一堆硬币的权值依次是$(a_i,b_i,a_i)$。定义$f(x)$：选择恰好$x$个硬币，保证如果选择了某一枚硬币，那么这枚硬币上面的硬币全部都必须被选择。给出$k$，你需要求出$f(1)\text{ xor }f(2)\text{ xor }f(3)\cdots f(k)$。$n\le 5\times 10^6,k\le 3\cdot n$


Solution：

首先，第$i$堆硬币可以拆成两个独立的物品，第一个物品体积为$1$，价值为$a_i$；第二个物品体积为$2$，价值为$a_i+b_i$。选第一个物品相当于取最上面的那枚硬币，选第二个物品选择最上面的两枚硬币，两个物品都选相当于三枚硬币都选。

如果确定了体积为$1$的物品的数量和体积为$2$的物品的数量，那么最优的策略肯定是直接选权值较大的若干个。

注意$f(x-1)$的方案变成$f(x)$的方案，要么是少选了一个体积为$1$的物品，多选了一个体积为$2$的物品；要么就是多选了一个体积为$2$的物品。可以用归纳证明。

---

### T2 Sequence

给出一个字符串$s$以及$q$次询问，每次询问给出$l,r$，你需要回答$s[l\cdots r]$的本质不同的非空子序列的数量。答案对$10^9+7$取模。$n,q\le 5\times 10^5$，字符集大小为$10$。

Solution：

设$f_{i,x}$表示考虑前$i$个字符，以$x$这个字符为结尾的本质不同的子序列数量。

那么：
$$
f_{i,j} = \begin{cases}
1 + \sum_{j\in [0,10)} f_{i-1,j} && j = s_i\\
f_{i-1,j} && j\not=s_i
\end{cases}
$$

将$dp$数组看做（字符集大小+1）维的向量，在$dp$数组的下面加一维表示$1$：
$$
(f_{i,0},f_{i,1},f_{i,2} \cdots f_{i,9},1)^T
$$
那么转移相当于乘了一个$10\times 10$的矩阵。

设第$i$个字符的转移的矩阵是$A_i$。我们要求的就是（下面以字符集大小为$3$举例）：
$$
\begin{pmatrix}1 & 1 & 1 & 1\end{pmatrix} A_r A_{r-1} \cdots A_{l_1} A_l \begin{pmatrix}0 \\ 0\\  0 \\ 1\end{pmatrix}
$$

设$I_i$表示$A_i$的逆。发现由于$A_i$很特殊，所以$I_i$也可以直接得到。

$$
A_i = \begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
1 & 1 & 1 & 1\\
0 & 0 & 0 & 1\\
\end{pmatrix}\\
I_i = \begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
-1 & -1 & 1 & -1\\
0 & 0 & 0 & 1\\
\end{pmatrix}
$$

则要求的就是
$$
\begin{pmatrix}1 & 1 & 1 & 1\end{pmatrix} A_r A_{r-1} \cdots A_1 I_1 I_2 \cdots I_{l-1} \begin{pmatrix}0 \\ 0\\  0 \\ 1\end{pmatrix}
$$

由于结合律，我们只需要对于每一个$i$，求出（得到的是一个$1\times |\sum|$的向量）
$$
\begin{pmatrix}1 & 1 & 1 & 1\end{pmatrix} A_i A_{i-1} \cdots A_1
$$
和
$$
I_1 I_2 \cdots I_i \begin{pmatrix}0 \\ 0\\  0 \\ 1\end{pmatrix}
$$

考虑将$B$矩阵的左边乘上$A_i$，设$b_i$表示$B$第$i$列的所有数的和：
$$
 \begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
1 & 1 & 1 & 1\\
0 & 0 & 0 & 1\\
\end{pmatrix} 
\cdot 
 \begin{pmatrix}
a & b & c & d \\
e & f & g & h \\
i & j & k & l\\
m & n & o & p\\
\end{pmatrix} 
=\begin{pmatrix}
a & b & c & d \\
e & f & g & h \\
b_0& b_1 & b_2 & b_3\\
m & n & o & p\\
\end{pmatrix} 
$$

发现只有$|\sum|$个位置改变了。同时，我们可以在$O(|\sum|)$的时间内维护$b_i$。$B$与$\begin{pmatrix}1 & 1 & 1 & 1\end{pmatrix}$的乘积也可以在$O(|\sum|)$内求得。

考虑在一个矩阵$B$的右边乘上$I_i$：

$$
 \begin{pmatrix}
a & b & c & d \\
e & f & g & h \\
i & j & k & l\\
m & n & o & p\\
\end{pmatrix} 
\cdot 
\begin{pmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
-1 & -1 & 1 & -1\\
0 & 0 & 0 & 1\\
\end{pmatrix}
= \begin{pmatrix}
a-c & b-c & c & d-c \\
e-g & f-g & g & h-g \\
i-k & j-k & k & l-k\\
m-o & n-o & o & p-o\\
\end{pmatrix} 
$$

发现操作相当于每一行除了某一个数以外，全部都减去另外一个数。

用一个数组$c_i$存下每一行共同减去的数的和，于是矩阵内只需要修改$O(|\sum|)$位置，可以在$O(|\sum|)$的时间内做完矩阵乘法。$B$与$\begin{pmatrix}0 \\ 0\\  0 \\ 1\end{pmatrix}$的乘积也很好计算，就是最后一列的每一个数。

这样就可以在$O(n\cdot |\sum|)$的时间内完成预处理，计算一个$1\times |\sum|$的向量和一个$|\sum | \times 1 $的向量的乘积的复杂度是$O(|\sum|)$的，所以总时间复杂度是$O(n \cdot |\sum| + q\cdot |\sum | )$。

---

### T3 Area

有$n$个点$A_1,A_2,A_3\cdots A_n$。有$q$次询问，每一次给出一个点$p$，你需要求出
$$
\max _{l\le r ,l,r\in [1,n]}\{ \sum_{i=l}^r p \times A_i \}
$$

$n\le 10^5,q\le 10^6$，坐标范围为$[-10^5,10^5]$。

Solution：

我写了一个$O(n\sqrt q \log q )$的方法水了$48$分：对点分块，设块大小为$T$，则块内有$T^2$个可能的区间，处理出这些区间的凸壳，$A$的前缀和在块内的凸壳。对于每一个询问，枚举右端点所在的块，那么左端点要么在块内（在$T^2$个点里面查），要么在左边的块里（在左边的块里面查出来并取$max$）。时间复杂度$O(({n\over T}T^2 + q\cdot {n\over T})\log T) = O(n \sqrt q \log q)$。

考虑直接求出所有可能区间（将区间看做一个点，点的坐标为区间内所有点的坐标的和）。考虑分治，设当前分治的区间是$[l,r]$，分成两个区间$[l,mid]$和$[mid+1,r]$，那么我们需要考虑的点集是：
$$
\{\sum_{i=x}^y A_i \mid  x\in [l,mid],y\in [mid+1,r] \}
$$

设$b_i = \sum_{j=i}^{mid} A_j,c_i = \sum_{j=mid+1}^i A_i$，那么上面的点集也就是
$$
\{ b_i + c_j \mid i\in [l,mid],j\in [mid+1,r] \}
$$

是一个闵可夫斯基和的形式，可以在$O(n \log n )$的时间内求出。

所以总复杂度是$O(n\log ^2 n + q\log n)$。