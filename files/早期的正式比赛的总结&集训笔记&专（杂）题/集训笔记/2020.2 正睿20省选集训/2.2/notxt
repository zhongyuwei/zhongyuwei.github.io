## 点分治合并子树

1. 容斥
2. 逐个加入
3. Huffman树（$O(n\log n)$）
4. 类似分治FFT，分治地合并子树（$O(n\log n)$）

Huffman tree的最优性证明[参考](https://endlesslethe.com/huffman-tree-tutorial.html)：权值最小的两个点必须是深度最深的两个点（否则将它们和最深的点交换必然可以使答案更优）。

## 求距离为$1,2\cdots n$的点对数

有两种方法：

1. 点分治
2. 长链剖分

## HDU6566 或者 [link](http://acm.hdu.edu.cn/contests/contest_showproblem.php?pid=1012&cid=867)

$n\le 100, V\le 10000$

搞出点分树的dfs序，然后可以得到一个$O(nV2^n)$的暴力状压dp。

发现和当前点不在点分树上同一个子树内的点的状态没用，所以状态压缩到$2^{\log_2 n} = n$。

总复杂度$O(Vn^2)$。

## 捉迷藏

单log做法：

1. 线段树上维护区间内点集的直径
2. 括号序列：进入某个点的时候加个左括号(+1)，离开的时候加个右括号(-1)，维护序列上两个黑点的距离的最大值
3. 直接在欧拉序上线段树硬肝，答案相当于$\max_{a\le b\le c\wedge \text{a,c is black}}\{ dep_a + dep_c - 2dep_b\}$

## 一个例题

luogu的一个题[link](https://www.luogu.com.cn/problem/P5163)

每次加入一条有向边，回答当前有多少个点对，两个点互相可达。$n\le 10^5, m\le 2.5\times 10^5$

整体二分，令`solve(l,r,E)`表示`E`中的端点是在$[l,r]$时间段被缩起来的。然后选择一个中间时间点，算此时的连通情况，然后分治下去。分治$[mid+1,r]$的时候要把$[l,mid]$的已经在同一个SCC里了的点在并查集里面合并了。

## 分块例题 1

区间加，查区间大于某数的元素个数。$n=m=10^5$

一个做法：把询问挂在块上，然后在重构这个块的时候，排序询问，然后归并。

## 分块例题 2

区间加，查区间第$k$小。$n=m=10^5$

块内维护有序数组。查的时候把两端的零散部分排序，然后二分，然后归并数数。

这样的复杂度是$O(\log^2 n{n\over T} + T)$，取$T = \sqrt {n} \log n$即可做到最优

## 分块例题 3

要求维护一个集合，$O(\sqrt n)$加入，$O(1)$查询第$k$大。

维护$\sqrt n$个双端队列，保证每一个的大小都是一样的，并且保证它们是有序的。插入的时候，把前面一个双端队列的元素拿来放在自己的队首，然后把自己的队尾给下一个双端队列。

## Codechef Chef and Churu

对函数分块，然后预处理每个数对每个块的贡献是多少。

这样会进行$O(q\sqrt n)$次查询，$O(q)$次修改，所以可以根号平衡一下。复杂度$O(q\sqrt n)$。

## 莫队

莫队的复杂度是$O(m T + {n^2\over T})$，当$T={n\over \sqrt m}$的时候复杂度最优。

优化常数：

- 调参数（比如说令$T={n\over \sqrt m} \times {2\over 3}$）
- 奇数块从小到大排，偶数块内从大到小排，这样在数据随机的时候常数可以乘以$\frac{1}{2}$。

## 多层分块，每层分成$D$块

复杂度$O(D \log_D n)$（不知道有啥用）

## bzoj3920

查区间内出现次数第$k_1$大的数的第$k_2$大。$n=m=10^5$

莫队，维护二元组（元素，出现次数）的集合。由于有$O(n\sqrt n)$次修改，$O(n)$次查询，根号平衡一下就能够达到$O(n\sqrt n)$的复杂度。

## LOJ2874

莫队，每一次删去$(cnt_x - 1)x$，加入$cnt_x \cdot x$。根号平衡之后，复杂度$O(n\sqrt n)$。

## 区间逆序对数

如果可以离线莫队中的询问，就可以分块平衡一下，总复杂度$O(n\sqrt n)$。

在线+莫队做法：把离线做的那个块状结构可持久化一下（每次修改的时候把$O(\sqrt n)$个块全部复制出来，空间复杂度$O(n\sqrt n)$），就可以支持在线查询。

二次离线：记$s(l_1,r_1,l_2,r_2) = \sum_{x\in [l_1,r_1],y\in [l_2,r_2]} $，那么右端点从$r$到$r'$的变化量就是

$$
\sum_{i=r+1}^{r'} s(1,i-1,i,i) - s(1,l-1,r+1,r')
$$

左边的东西直接前缀和就可以，右边的离线下来，然后枚举$[r,r']$中的元素的一个一个查。可以分块平衡。总复杂度$O(n\sqrt n)$

[zzq的在线分块做法](https://www.cnblogs.com/zzqsblog/p/7522528.html)

## 带修莫队

复杂度$O({n^2\over B^2}c + {n\over B}n + qB)$。


## CF765F

有个序列$a$，$q$次询问，每次给出$l,r$，询问$\min_{i,j\in [l,r]}\{|a_i-a_j|\}$。

离线下来，扫描$r$，维护$l$的答案。加入某个元素$a_k$的时候，先找出它左边的第一个大于它的元素$a_j$，然后找出第一个大于$a_j$且小于$a_k+a_j\over 2$的（否则那个数和$a_j$的组合会更加优秀）……这样只会做$\log V$次。对小于它的元素进行类似的处理。实现上可以维护每个值最后一次出现的位置。

## Codechef QCHEF 回滚莫队

对$L$分块，块内按照$R$排序。块内$L$所在部分的操作直接撤销，就可以避免删除操作。

## POI2015 Odwiedziny

如果$k > \sqrt n$就暴力，否则预处理。

## [Ynoi2015]いまこの時の輝きを

区间内数的乘积的约数。

莫队的时候只维护大于 1000 的质数，小于 1000 的质数预先暴力。

## 树分块

分块方法：

- 随机撒$\sqrt n$个点，这样每个点到它上面的第一个关键点的期望距离是$O(\sqrt n)$。
- 用所有深度为$\sqrt n$，且下面的最深儿子的深度大于等于$\sqrt n$的点作为关键点。

这两种方法都不能保证每块的大小不过大。

## 例题 COT2

强制在线树上数颜色。

预处理出关键点两两之间的答案，然后暴力询问点到关键点。

把修改$O(\sqrt n)$、查询$O(1)$的结构可持久化下来，就能够快速查询路径上某颜色的出现次数。

## 重量平衡树

会修改的点的数量每次是$O(\log n)$或者均摊每次$O(\log n)$的。例如treap, scapegoat,

应用：$O(\log n)$插入，$O(1)$询问两个元素哪个在前面。

[参考](https://blog.bill.moe/no-rotate-balance-tree-notes/)：核心思想是维护每个点映射到的一个实数值，使得中序遍历得到的实数值序列有序。

![0.jpg](https://i.loli.net/2020/02/02/LYKI4NAFutHWm5U.jpg)